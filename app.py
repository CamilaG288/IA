{"name": "Turbos Dashboard App", "type": "code/python", "content": "import streamlit as st\nimport pandas as pd\nimport io\n\n# Carregamento das planilhas principais\ncurva_df = pd.read_excel("CURVA ABC.xlsx")\nestrutura_df = pd.read_excel("ESTRUTURA.xlsx")\nestoque_df = pd.read_excel("ESTOQUE_DISPONIVEL.xlsx") # Estoque já descontado\n\n# Limpeza de colunas\nfor df in [curva_df, estrutura_df, estoque_df]:\n for col in df.columns:\n if df[col].dtype == object:\n df[col] = df[col].astype(str).str.strip().str.replace(".", "", regex=False)\n\n# Formatar números com ponto de milhar\ndef format_number(x):\n if isinstance(x, (int, float)):\n return f"{x:,.0f}".replace(",", ".")\n return x\n\n# Página inicial\nst.set_page_config(layout="wide")\nst.title("Painel de Planejamento - Montagem com Estoque Disponível")\nst.caption("Baseado apenas na planilha ESTOQUE_DISPONIVEL (já descontado dos pedidos em carteira).")\n\n# Preparar estoque\nestoque_df['QUANTIDADE'] = pd.to_numeric(estoque_df['QUANTIDADE'], errors='coerce').fillna(0)\nestoque_df = estoque_df.rename(columns={'QUANTIDADE': 'Estoque Disponivel'})\nestoque_df = estoque_df[['COMPONENTE', 'Estoque Disponivel']]\nestoque_df = estoque_df.set_index('COMPONENTE')\n\n# Prioridade da curva\ncurva_df['PRIORIDADE'] = pd.to_numeric(curva_df['PRIORIDADE'], errors='coerce').fillna(9999).astype(int)\ncurva_ordenada = curva_df.sort_values('PRIORIDADE')\n\nprodutos_possiveis = []\nestoque_montagem_df = estoque_df.copy()\n\n# Algoritmo Greedy\nfor _, row in curva_ordenada.iterrows():\n produto = row['PRODUTO']\n estrutura_item = estrutura_df[estrutura_df['PRODUTO'] == produto]\n\n if estrutura_item.empty:\n continue\n\n estrutura_item = estrutura_item.merge(\n estoque_montagem_df[['Estoque Disponivel']],\n left_on='COMPONENTE',\n right_index=True,\n how='left'\n )\n estrutura_item['Estoque Disponivel'] = estrutura_item['Estoque Disponivel'].fillna(0)\n\n estrutura_item['QUANTIDADE'] = pd.to_numeric(estrutura_item['QUANTIDADE'], errors='coerce').fillna(0)\n estrutura_item['Qtd Possivel'] = estrutura_item['Estoque Disponivel'] / estrutura_item['QUANTIDADE']\n unidades_possiveis = int(estrutura_item['Qtd Possivel'].min())\n\n if unidades_possiveis > 0:\n produtos_possiveis.append({\n 'Produto': produto,\n 'Descricao Produto': row['DESCRICAO PRODUTO'],\n 'Curva': row['CURVA'],\n 'Unidades Possíveis': unidades_possiveis,\n 'Grupo Planejador': row['DESCRICAO GRUPO PLANEJADOR']\n })\n\n # Atualiza estoque após usar\n for idx, comp_row in estrutura_item.iterrows():\n componente = comp_row['COMPONENTE']\n quantidade_necessaria = comp_row['QUANTIDADE'] * unidades_possiveis\n if componente in estoque_montagem_df.index:\n estoque_montagem_df.at[componente, 'Estoque Disponivel'] -= quantidade_necessaria\n if estoque_montagem_df.at[componente, 'Estoque Disponivel'] < 0:\n estoque_montagem_df.at[componente, 'Estoque Disponivel'] = 0\n\n# Exibir resultado\nst.subheader("Lista de Turbocompressores com Montagem Possível")\n\nif produtos_possiveis:\n df_possiveis = pd.DataFrame(produtos_possiveis)\n df_possiveis.index = df_possiveis.index + 1\n st.dataframe(df_possiveis.reset_index().applymap(format_number))\n\n total_montagem = df_possiveis['Unidades Possíveis'].sum()\n total_produtos = len(df_possiveis)\n\n col1, col2 = st.columns(2)\n col1.metric("Quantidade Total de Produtos", format_number(total_produtos))\n col2.metric("Unidades Possíveis para Montagem", format_number(total_montagem))\n\n # Botão para download\n output = io.BytesIO()\n with pd.ExcelWriter(output, engine='openpyxl') as writer:\n df_possiveis.to_excel(writer, index=False)\n processed_data = output.getvalue()\n\n st.download_button(\n label="Baixar Lista em Excel",\n data=processed_data,\n file_name='montagem_possivel.xlsx',\n mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n )"}