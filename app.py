{"updates": [{"name": "Turbos Dashboard App", "type": "code/python", "content": "import streamlit as st\nimport pandas as pd\nimport io\n\n# Carregamento dos dados\ncurva_df = pd.read_excel("CURVA ABC.xlsx", header=0)\ncurva_df.columns = curva_df.columns.str.strip()\n\nestrutura_df = pd.read_excel("ESTRUTURA.xlsx")\nestoque_df = pd.read_excel("ESTOQUE_DISPONIVEL.xlsx") # Planilha nova com estoque l\u00edquido\norigem_df = pd.read_excel("COMPONENTES_ORIGEM.xlsx")\nordens_abertas_df = pd.read_excel("ORDENS_COMPRA_PRODUCAO_ABERTA.xlsx")\npedidos_abertos_df = pd.read_excel("PEDIDOS_ABERTO.xlsx")\nestrutura_pedidos_abertos_df = pd.read_excel("ESTRUTURA_PEDIDOS_ABERTOS.xlsx")\ncomponentes_reservados_df = pd.read_excel("COMPONENTE_PEDIDOS_ABERTOS.xlsx") # Apenas para consulta\n\nst.set_page_config(layout="wide")\n\nst.title("Painel de Planejamento Montagem de Turbocompressores X Estoque")\n\n# Remover pontos e espa\u00e7os extras dos c\u00f3digos e nomes\nfor df in [curva_df, estrutura_df, estoque_df, origem_df, ordens_abertas_df, pedidos_abertos_df, estrutura_pedidos_abertos_df, componentes_reservados_df]:\n for col in df.columns:\n if df[col].dtype == object:\n df[col] = df[col].astype(str).str.strip().str.replace(".", "", regex=False)\n\n# Fun\u00e7\u00e3o para formatar n\u00fameros com ponto de milhar\ndef format_number(x):\n if isinstance(x, (int, float)):\n return f"{x:,.0f}".replace(",", ".")\n return x\n\n# Informa\u00e7\u00e3o adicional\nst.caption("*As quantidades poss\u00edveis j\u00e1 consideram o desconto dos componentes reservados para pedidos em carteira (via planilha ESTOQUE_DISPONIVEL).")\n\n# Preparar estrutura\ncurva_df['PRIORIDADE'] = curva_df['PRIORIDADE'].astype(int)\ncurva_ordenada = curva_df.sort_values('PRIORIDADE')\n\npedidos_abertos_df['QUANTIDADE PRODUZIR'] = pd.to_numeric(pedidos_abertos_df['QUANTIDADE PRODUZIR'], errors='coerce').fillna(0)\nqtd_carteira = pedidos_abertos_df.groupby('PRODUTO')['QUANTIDADE PRODUZIR'].sum().reset_index().rename(columns={'QUANTIDADE PRODUZIR': 'Quantidade em Carteira'})\n\nprodutos_possiveis = []\nestoque_df['Estoque Disponivel'] = pd.to_numeric(estoque_df['QUANTIDADE'], errors='coerce').fillna(0)\nestoque_montagem_df = estoque_df.set_index('COMPONENTE')\n\nfor _, row in curva_ordenada.iterrows():\n produto = row['PRODUTO']\n estrutura_item = estrutura_df[estrutura_df['PRODUTO'] == produto]\n\n if estrutura_item.empty:\n continue\n\n estrutura_item = estrutura_item.merge(estoque_montagem_df[['Estoque Disponivel']], left_on='COMPONENTE', right_index=True, how='left')\n estrutura_item['Estoque Disponivel'] = estrutura_item['Estoque Disponivel'].fillna(0)\n\n if estrutura_item['QUANTIDADE'].isnull().any():\n continue\n\n estrutura_item['Qtd Possivel'] = estrutura_item['Estoque Disponivel'] / estrutura_item['QUANTIDADE']\n unidades_possiveis = int(estrutura_item['Qtd Possivel'].min())\n\n if unidades_possiveis > 0:\n carteira = qtd_carteira[qtd_carteira['PRODUTO'] == produto]['Quantidade em Carteira'].sum()\n produtos_possiveis.append({\n 'Produto': produto,\n 'Descricao Produto': row['DESCRICAO PRODUTO'],\n 'Curva': row['CURVA'],\n 'Unidades Poss\u00edveis': unidades_possiveis,\n 'Quantidade em Carteira': int(carteira),\n 'Grupo Planejador': row['DESCRICAO GRUPO PLANEJADOR']\n })\n\n # Atualizar estoque ap\u00f3s uso\n for idx, comp_row in estrutura_item.iterrows():\n componente = comp_row['COMPONENTE']\n quantidade_necessaria = comp_row['QUANTIDADE'] * unidades_possiveis\n if componente in estoque_montagem_df.index:\n estoque_montagem_df.at[componente, 'Estoque Disponivel'] -= quantidade_necessaria\n if estoque_montagem_df.at[componente, 'Estoque Disponivel'] < 0:\n estoque_montagem_df.at[componente, 'Estoque Disponivel'] = 0\n\n# Exibir resultado\nst.subheader("Lista de Turbocompressores com Montagem Poss\u00edvel (Estoque Atual)")\n\nif produtos_possiveis:\n df_possiveis = pd.DataFrame(produtos_possiveis)\n df_possiveis.index = df_possiveis.index + 1\n\n st.dataframe(df_possiveis.reset_index().applymap(format_number))\n\n total_montagem = df_possiveis['Unidades Poss\u00edveis'].sum()\n total_carteira = df_possiveis['Quantidade em Carteira'].sum()\n total_produtos = len(df_possiveis)\n\n col1, col2, col3 = st.columns(3)\n col1.metric("Quantidade Total de Produtos", format_number(total_produtos))\n col2.metric("Unidades Poss\u00edveis para Montagem", format_number(total_montagem))\n col3.metric("Valor Total na Carteira", format_number(total_carteira))\n\n # Bot\u00e3o para baixar\n output = io.BytesIO()\n with pd.ExcelWriter(output, engine='openpyxl') as writer:\n df_possiveis.to_excel(writer, index=False)\n processed_data = output.getvalue()\n\n st.download_button(\n label="Baixar Lista de Montagem Poss\u00edvel em Excel",\n data=processed_data,\n file_name='montagem_possivel.xlsx',\n mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n key='download_montagem'\n )\n\n# Consulta de quantidade poss\u00edvel por produto\nst.subheader("Consulta de Quantidade Poss\u00edvel por Produto")\ncodigo_busca = st.text_input('Digite o c\u00f3digo do produto (ex: 805335-01):')\n\nif codigo_busca:\n resultado = df_possiveis[df_possiveis['Produto'] == codigo_busca]\n if not resultado.empty:\n unidades_possiveis = resultado['Unidades Poss\u00edveis'].values[0]\n st.success(f"Quantidade poss\u00edvel de montagem para o produto {codigo_busca}: {format_number(unidades_possiveis)} unidades")\n else:\n st.warning(f"Produto {codigo_busca} n\u00e3o encontrado ou n\u00e3o possui unidades poss\u00edveis para montagem.")"}]}