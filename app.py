{"updates": [{"op": "replace", "path": "code", "value": "import streamlit as st\nimport pandas as pd\nimport io\n\nst.set_page_config(layout="wide")\n\nst.title("Montagem Possível de Turbocompressores (Apenas com Estoque Disponível)")\n\n# Carregamento das planilhas principais\ncurva_df = pd.read_excel("CURVA ABC.xlsx")\nestrutura_df = pd.read_excel("ESTRUTURA.xlsx")\nestoque_disponivel_df = pd.read_excel("ESTOQUE_DISPONIVEL.xlsx")\n\n# Limpeza de dados\nfor df in [curva_df, estrutura_df, estoque_disponivel_df]:\n for col in df.columns:\n if df[col].dtype == object:\n df[col] = df[col].astype(str).str.strip().str.replace(".", "", regex=False)\n\n# Garantir tipos numéricos\nestoque_disponivel_df['QUANTIDADE'] = pd.to_numeric(estoque_disponivel_df['QUANTIDADE'], errors='coerce').fillna(0)\nestrutura_df['QUANTIDADE'] = pd.to_numeric(estrutura_df['QUANTIDADE'], errors='coerce').fillna(0)\n\n# Criar índice do estoque para acesso rápido\nestoque_dict = estoque_disponivel_df.set_index('COMPONENTE')['QUANTIDADE'].to_dict()\n\n# Ordenar pela prioridade da curva ABC\ncurva_df['PRIORIDADE'] = pd.to_numeric(curva_df['PRIORIDADE'], errors='coerce').fillna(9999).astype(int)\ncurva_ordenada = curva_df.sort_values('PRIORIDADE')\n\n# Algoritmo greedy para calcular montáveis\nresultado = []\nestoque_montagem = estoque_dict.copy()\n\nfor _, row in curva_ordenada.iterrows():\n produto = row['PRODUTO']\n descricao = row['DESCRICAO PRODUTO']\n curva = row['CURVA']\n grupo = row['DESCRICAO GRUPO PLANEJADOR']\n\n estrutura_item = estrutura_df[estrutura_df['PRODUTO'] == produto]\n if estrutura_item.empty:\n continue\n\n # Verifica quantidade possível com o estoque disponível atual\n estrutura_item = estrutura_item.copy()\n estrutura_item['Disponivel'] = estrutura_item['COMPONENTE'].map(estoque_montagem).fillna(0)\n estrutura_item['Qtd Possivel'] = estrutura_item['Disponivel'] / estrutura_item['QUANTIDADE']\n unidades_possiveis = int(estrutura_item['Qtd Possivel'].min())\n\n if unidades_possiveis > 0:\n resultado.append({\n 'Produto': produto,\n 'Descricao Produto': descricao,\n 'Curva': curva,\n 'Unidades Possíveis': unidades_possiveis,\n 'Grupo Planejador': grupo\n })\n\n # Atualiza estoque\n for _, comp_row in estrutura_item.iterrows():\n comp = comp_row['COMPONENTE']\n qtd_necessaria = comp_row['QUANTIDADE'] * unidades_possiveis\n estoque_montagem[comp] -= qtd_necessaria\n\n# Exibir resultados\nif resultado:\n df_resultado = pd.DataFrame(resultado)\n df_resultado.index = df_resultado.index + 1\n\n def format_number(x):\n return f"{x:,.0f}".replace(",", ".") if isinstance(x, (int, float)) else x\n\n st.dataframe(df_resultado.reset_index().applymap(format_number))\n\n total_produtos = len(df_resultado)\n total_unidades = df_resultado['Unidades Possíveis'].sum()\n\n col1, col2 = st.columns(2)\n col1.metric("Total de Produtos Montáveis", format_number(total_produtos))\n col2.metric("Total de Unidades Possíveis", format_number(total_unidades))\n\n # Botão para baixar Excel\n output = io.BytesIO()\n with pd.ExcelWriter(output, engine='openpyxl') as writer:\n df_resultado.to_excel(writer, index=False)\n st.download_button(\n label="Baixar Excel",\n data=output.getvalue(),\n file_name="montagem_possivel_simples.xlsx",\n mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"\n )\nelse:\n st.warning("Nenhum produto pode ser montado com o estoque atual.")"}]}